@mixin sp-layout {
  @media screen and (max-width: 750px) {
    @content;
  }
}

@function random_range($min, $max) {
  $rand: random();
  $random_range: $min + floor($rand * (($max - $min) + 1));
  @return $random_range;
}

.stars {
  position: fixed;
  top: -100%;
  //   right: -300px;
  width: 200%;
  height: 200%;
  transform: rotate(-45deg);
}

.star {
  $star-count: 50;
  --primary-color: hsl(196, 78%, 61%);
  --star-color: var(--primary-color);
  --star-tail-length: 6em;
  --star-tail-height: 2px;
  --star-width: calc(var(--star-tail-length) / 6);
  --fall-duration: 9s;
  --tail-fade-duration: var(--fall-duration);

  position: absolute;
  top: var(--top-offset);
  left: 0;
  width: var(--star-tail-length);
  height: var(--star-tail-height);
  color: var(--star-color);
  background: linear-gradient(45deg, currentColor, transparent);
  border-radius: 50%;
  filter: drop-shadow(0 0 6px currentColor);
  transform: translate3d(140em, 0, 0);
  animation: fall var(--fall-duration) var(--fall-delay) linear infinite,
    tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;

  @include sp-layout {
    // For mobile performance, tail-fade animation will be removed QAQ
    animation: fall var(--fall-duration) var(--fall-delay) linear infinite;
  }

  @for $i from 1 through $star-count {
    &:nth-child(#{$i}) {
      --star-tail-length: #{random_range(500em, 750em) / 100};
      --top-offset: #{random_range(0vh, 20000vh) / 100};
      --fall-duration: #{random_range(6000, 12000s) / 1000};
      --fall-delay: #{random_range(0, 10000s) / 1000};
    }
  }

  &::before,
  &::after {
    position: absolute;
    content: '';
    top: 0;
    left: calc(var(--star-width) / -2);
    width: var(--star-width);
    height: 100%;
    background: linear-gradient(45deg, transparent, currentColor, transparent);
    border-radius: inherit;
    animation: blink 2s linear infinite;
  }

  &::before {
    transform: rotate(45deg);
  }

  &::after {
    transform: rotate(-45deg);
  }
}

@keyframes fall {
  to {
    transform: translate3d(-30em, 0, 0);
  }
}

@keyframes tail-fade {
  0%,
  50% {
    width: var(--star-tail-length);
    opacity: 1;
  }

  70%,
  80% {
    width: 0;
    opacity: 0.4;
  }

  100% {
    width: 0;
    opacity: 0;
  }
}

@keyframes blink {
  50% {
    opacity: 0.6;
  }
}

#glassmorphism {
  width: 600px;
  height: 400px;
  z-index: 9999;
  position: relative;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(10px);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.18);
  //   .vue-typer .custom.char.typed {
  //     color: #fff;
  //   }
  //   .vue-typer .custom.char.selected {
  //     color: #fff;
  //     background-color: transparent;
  //     text-decoration: line-through;
  //   }

  //   .vue-typer .custom.caret {
  //     display: none;
  //   }
  @keyframes rocking {
    0%,
    100% {
      transform: rotateZ(-10deg);
    }

    50% {
      transform: rotateZ(10deg);
    }
  }

  .vue-typer {
    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    span {
      font-size: 2rem;
      font-family: 'SeoulHangangM';
    }
  }
  .vue-typer .custom.char.typed {
    color: #fff;
  }
  .vue-typer .custom.char.selected {
    color: #e91e63;
  }

  .vue-typer .custom.caret {
    animation: rocking 1s ease-in-out 0s infinite;
  }
  .vue-typer .custom.caret.typing {
    background-color: #009688;
  }
  .vue-typer .custom.caret.selecting {
    display: inline-block;
    background-color: #e91e63;
  }
}
